public protocol SimpleProtocol { }
public struct SimpleProtocolUser: SimpleProtocol { }
public class SimpleObject: Buildable {
    var id: UUID?
    var name: String?
    var protocolUser: (any SimpleProtocol)?
    let numberOfStuff: Int

    public init(numberOfStuff: Int, id: UUID? = nil, name: String? = nil, protocolUser: SimpleProtocol?) {
        self.numberOfStuff = numberOfStuff
        self.id = id
        self.name = name
        self.protocolUser = protocolUser
    }

    public static func validate(_ container: [BuildableContainerProperties : Any]) -> Bool {
        true
    }

    public static func build(_ container: [BuildableContainerProperties : Any]) -> SimpleObject {
        SimpleObject(id: container[.id] as? UUID, name: container[.name] as? String)
    }

    public typealias BuildableSelf = SimpleObject

    public typealias BuildableContainerProperties = BuildableProperties

    public enum BuildableProperties: CaseIterable {
        case id
        case name
        case protocolUser
        case numberOfStuff
    }

    public class Builder {
        private var container = [BuildableProperties: Any]()
        public init() {
        }
        public func setId(_ id: UUID?) -> Builder {
            self.container[.id] = id as Any
            return self
        }
        public func setName(_ name: String?) -> Builder {
            self.container[.name] = name as Any
            return self
        }
        public func setProtocolUser(_ protocolUser: (any SimpleProtocol)?) -> Builder {
            self.container[.protocolUser] = protocolUser as Any
            return self
        }
        public func setNumberOfStuff(_ numberOfStuff: Int) -> Builder {
            self.container[.numberOfStuff] = numberOfStuff as Any
            return self
        }
        public func build() -> Result<SimpleObject, BuilderErrors> {
            guard SimpleObject.validate(container) else {
                return .failure(.validationError)
            }
            for property in BuildableContainerProperties.allCases {
                switch property {
                case .id:
                    break
                case .name:
                    break
                case .protocolUser:
                    break
                case .numberOfStuff:
                    if container[property] == nil {
                        return .failure(.validationError)
                    }
                }
            }
            return .success(SimpleObject.build(container))
        }
    }
}
